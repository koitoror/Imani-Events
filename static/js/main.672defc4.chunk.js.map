{"version":3,"sources":["components/Header.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["HeaderExampleImage","Header","as","Image","circular","src","genderOptions","key","text","value","FormExampleFieldControlId","Form","Group","widths","Field","id","control","Input","label","placeholder","Select","options","children","htmlFor","search","searchInput","TextArea","error","content","pointing","Button","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"wQASeA,EANY,kBACzB,kBAACC,EAAA,EAAD,CAAQC,GAAG,MACT,kBAACC,EAAA,EAAD,CAAOC,UAAQ,EAACC,IAAI,kEADtB,a,6CCDIC,EAAgB,CACpB,CAAEC,IAAK,IAAKC,KAAM,OAAQC,MAAO,QACjC,CAAEF,IAAK,IAAKC,KAAM,SAAUC,MAAO,UACnC,CAAEF,IAAK,IAAKC,KAAM,QAASC,MAAO,UAoDrBC,EAjDmB,kBAChC,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,OAAO,SACjB,kBAACF,EAAA,EAAKG,MAAN,CACEC,GAAG,gCACHC,QAASC,IACTC,MAAM,aACNC,YAAY,eAEd,kBAACR,EAAA,EAAKG,MAAN,CACEC,GAAG,+BACHC,QAASC,IACTC,MAAM,YACNC,YAAY,cAEd,kBAACR,EAAA,EAAKG,MAAN,CACEE,QAASI,IACTC,QAASf,EACTY,MAAO,CAAEI,SAAU,SAAUC,QAAS,8BACtCJ,YAAY,SACZK,QAAM,EACNC,YAAa,CAAEV,GAAI,iCAGvB,kBAACJ,EAAA,EAAKG,MAAN,CACEC,GAAG,gCACHC,QAASU,IACTR,MAAM,UACNC,YAAY,YAEd,kBAACR,EAAA,EAAKG,MAAN,CACEC,GAAG,iCACHC,QAASC,IACTC,MAAM,QACNC,YAAY,iBACZQ,MAAO,CACLC,QAAS,qCACTC,SAAU,WAGd,kBAAClB,EAAA,EAAKG,MAAN,CACEC,GAAG,6BACHC,QAASc,IACTF,QAAQ,UACRV,MAAM,yBCnCGa,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,0CCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArB,GACLsB,QAAQtB,MAAMA,EAAMuB,c","file":"static/js/main.672defc4.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Header, Image } from 'semantic-ui-react'\r\n\r\nconst HeaderExampleImage = () => (\r\n  <Header as='h2'>\r\n    <Image circular src='https://react.semantic-ui.com/images/avatar/large/patrick.png' /> Patrick\r\n  </Header>\r\n)\r\n\r\nexport default HeaderExampleImage","import React from 'react'\r\nimport { Form, Input, TextArea, Button, Select } from 'semantic-ui-react'\r\n\r\nconst genderOptions = [\r\n  { key: 'm', text: 'Male', value: 'male' },\r\n  { key: 'f', text: 'Female', value: 'female' },\r\n  { key: 'o', text: 'Other', value: 'other' },\r\n]\r\n\r\nconst FormExampleFieldControlId = () => (\r\n  <Form>\r\n    <Form.Group widths='equal'>\r\n      <Form.Field\r\n        id='form-input-control-first-name'\r\n        control={Input}\r\n        label='First name'\r\n        placeholder='First name'\r\n      />\r\n      <Form.Field\r\n        id='form-input-control-last-name'\r\n        control={Input}\r\n        label='Last name'\r\n        placeholder='Last name'\r\n      />\r\n      <Form.Field\r\n        control={Select}\r\n        options={genderOptions}\r\n        label={{ children: 'Gender', htmlFor: 'form-select-control-gender' }}\r\n        placeholder='Gender'\r\n        search\r\n        searchInput={{ id: 'form-select-control-gender' }}\r\n      />\r\n    </Form.Group>\r\n    <Form.Field\r\n      id='form-textarea-control-opinion'\r\n      control={TextArea}\r\n      label='Opinion'\r\n      placeholder='Opinion'\r\n    />\r\n    <Form.Field\r\n      id='form-input-control-error-email'\r\n      control={Input}\r\n      label='Email'\r\n      placeholder='joe@schmoe.com'\r\n      error={{\r\n        content: 'Please enter a valid email address',\r\n        pointing: 'below',\r\n      }}\r\n    />\r\n    <Form.Field\r\n      id='form-button-control-public'\r\n      control={Button}\r\n      content='Confirm'\r\n      label='Label with htmlFor'\r\n    />\r\n  </Form>\r\n)\r\n\r\nexport default FormExampleFieldControlId","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n// import 'semantic-ui-css/semantic.min.css'\nimport  HeaderExampleImage  from './components/Header'\nimport  FormExampleFieldControlId  from './components/Login'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HeaderExampleImage />\n      <FormExampleFieldControlId />\n      <div> Hello </div>  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n// import 'semantic-ui-css/semantic.js';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}